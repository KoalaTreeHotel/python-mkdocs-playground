{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>Compute and return the sum of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>A number representing the first addend in the addition.</p> required <code>b</code> <code>float</code> <p>A number representing the second addend in the addition.</p> required <p>Returns:</p> Name Type Description <code>num</code> <code>float</code> <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> Source code in <code>calculations.py</code> <pre><code>def add(a, b):\n    \"\"\"Compute and return the sum of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6.0\n\n    Args:\n        a (float): A number representing the first addend in the addition.\n        b (float): A number representing the second addend in the addition.\n\n    Returns:\n        num (float): A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\n    return float(a + b)\n</code></pre> <p>Compute and return the difference between two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subtract(6.0, 4.0)\n2.0\n&gt;&gt;&gt; subtract(10, 3)\n7.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>A number representing the minuend in the subtraction.</p> required <code>b</code> <code>float</code> <p>A number representing the subtrahend in the subtraction.</p> required <p>Returns:</p> Name Type Description <code>num</code> <code>float</code> <p>A number representing the arithmetic difference between <code>a</code> and <code>b</code>.</p> Source code in <code>calculations.py</code> <pre><code>def subtract(a, b):\n    \"\"\"Compute and return the difference between two numbers.\n\n    Examples:\n        &gt;&gt;&gt; subtract(6.0, 4.0)\n        2.0\n        &gt;&gt;&gt; subtract(10, 3)\n        7.0\n\n    Args:\n        a (float): A number representing the minuend in the subtraction.\n        b (float): A number representing the subtrahend in the subtraction.\n\n    Returns:\n        num (float): A number representing the arithmetic difference between `a` and `b`.\n    \"\"\"\n    return float(a - b)\n</code></pre> <p>Compute and return the product of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; multiply(3.0, 2.0)\n6.0\n&gt;&gt;&gt; multiply(7, 5)\n35.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>A number representing the multiplicand in the multiplication.</p> required <code>b</code> <code>float</code> <p>A number representing the multiplier in the multiplication.</p> required <p>Returns:</p> Name Type Description <code>num</code> <code>float</code> <p>A number representing the arithmetic product of <code>a</code> and <code>b</code>.</p> Source code in <code>calculations.py</code> <pre><code>def multiply(a, b):\n    \"\"\"Compute and return the product of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; multiply(3.0, 2.0)\n        6.0\n        &gt;&gt;&gt; multiply(7, 5)\n        35.0\n\n    Args:\n        a (float): A number representing the multiplicand in the multiplication.\n        b (float): A number representing the multiplier in the multiplication.\n\n    Returns:\n        num (float): A number representing the arithmetic product of `a` and `b`.\n    \"\"\"\n    return float(a * b)\n</code></pre> <p>Compute and return the quotient of two numbers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; divide(8.0, 2.0)\n4.0\n&gt;&gt;&gt; divide(9, 3)\n3.0\n&gt;&gt;&gt; divide(10, 0)\nTraceback (most recent call last):\n    ...\nZeroDivisionError: division by zero\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>A number representing the dividend in the division.</p> required <code>b</code> <code>float</code> <p>A number representing the divisor in the division.</p> required <p>Raises:</p> Type Description <code>ZeroDivisionError</code> <p>If <code>b</code> is zero, indicating division by zero is not allowed.</p> <p>Returns:</p> Name Type Description <code>num</code> <code>float</code> <p>A number representing the arithmetic quotient of <code>a</code> divided by <code>b</code>.</p> Source code in <code>calculations.py</code> <pre><code>def divide(a, b):\n    \"\"\"Compute and return the quotient of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; divide(8.0, 2.0)\n        4.0\n        &gt;&gt;&gt; divide(9, 3)\n        3.0\n        &gt;&gt;&gt; divide(10, 0)\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n\n    Args:\n        a (float): A number representing the dividend in the division.\n        b (float): A number representing the divisor in the division.\n\n    Raises:\n        ZeroDivisionError: If `b` is zero, indicating division by zero is not allowed.\n\n    Returns:\n        num (float): A number representing the arithmetic quotient of `a` divided by `b`.\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return float(a / b)\n</code></pre> <p>A test class for the calculations module.</p> <p>This class is designed to contain unit tests for the functions defined in the calculations module, including add, subtract, multiply, and divide. Each method within this class should test a specific function from the calculations module for correctness, handling of edge cases, and error conditions.</p> Source code in <code>calculations.py</code> <pre><code>class TestCalculations:\n    \"\"\"\n    A test class for the calculations module.\n\n    This class is designed to contain unit tests for the functions defined in the calculations module,\n    including add, subtract, multiply, and divide. Each method within this class should test a specific\n    function from the calculations module for correctness, handling of edge cases, and error conditions.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes the TestCalculations class.\n\n        This constructor can be used to set up any prerequisites for the tests,\n        such as initializing variables or setting up test data.\n        \"\"\"\n        print(\"Initializing TestCalculations Class...\")\n</code></pre>"},{"location":"reference/#calculations.TestCalculations.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the TestCalculations class.</p> <p>This constructor can be used to set up any prerequisites for the tests, such as initializing variables or setting up test data.</p> Source code in <code>calculations.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the TestCalculations class.\n\n    This constructor can be used to set up any prerequisites for the tests,\n    such as initializing variables or setting up test data.\n    \"\"\"\n    print(\"Initializing TestCalculations Class...\")\n</code></pre>"}]}